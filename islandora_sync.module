<?php
// $Id$


/*
 * Questa è la query iTQL per avere tutte le coppie collezione_padre,collezione_figlia
 * 
 * select $padre_identifier $figlio_identifier from <#ri>
 * where 
 *   ($figlio <info:fedora/fedora-system:def/relations-external#isMemberOfCollection> $padre)
 * and 
 *   ( $padre <fedora-model:hasModel> <info:fedora/islandora:collectionCModel> or
 *     $padre <fedora-model:hasModel> <info:fedora/epistemetec:sub_collection> )
 * and
 *   ( $figlio <fedora-model:hasModel> <info:fedora/islandora:collectionCModel> or 
 *    $figlio <fedora-model:hasModel> <info:fedora/epistemetec:sub_collection>)
 * and 
 *    $figlio <dc:identifier> $figlio_identifier
 * and 
 *    $padre <dc:identifier> $padre_identifier
 *    
 * */

/**
 * Implementation of hook_cronapi()
 * 
 * @param string $op
 * @param string $job
 */

function islandora_sync_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array(
        'islandora_sync_collection_sync' => 'create and update collection table'
      );
    case 'rule':
      if ($job == 'islandora_sync_collection_sync' || $job == 'refresh_sync')
        return '0 * * * *'; //every hour
    case 'execute':
      /*
      if ($job == 'islandora_sync_refresh_sync') {
        islandora_sync_refresh_sync();
      }
      if ($job == 'islandora_sync_manage_nodes') {
        islandora_sync_manage_nodes();
      }
      */
      if( $job == 'islandora_sync_collection_sync'){
        islandora_sync_collection_sync();
      }
  }
}

 /**
 * Returns the objects of a certain model.
 * 
 * @param string $cm_pid
 * @param string $query_string - an alternative itql query
 */
function __getObjects($cm_pid, $query_string="") {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
        
  if (empty($query_string)) {
    $query_string = 'select
                     $title $identifier $modified
                     from <#ri>
                     where  $object <dc:title> $title
                     and
                		 	   $object <dc:identifier> $identifier
                     and
                         $object <fedora-view:lastModifiedDate> $modified
                     and
                         $object <fedora-model:hasModel> <info:fedora/' . $cm_pid . '>
                     order by $modified ';
  }

  $query_string = htmlentities(urlencode($query_string));

  $url = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $url.= "?type=tuples&flush=TRUE&format=CSV&limit=1000&offset=0&lang=itql&stream=on&query=" . $query_string;
  $content = do_curl($url);

  $rows = explode("\n", $content);
  
  $heading = explode(",", $rows[0]);
  for ($i = 0; $i < count($heading); $i++) {
    $heading[$i] = str_replace("\"", "", $heading[$i]);
  }
  
  array_shift($rows); // Knock of the first heading row of the csv

  $objects = array();
  if (count($rows)) {
    $index = 0;
    foreach ($rows as $row) {
      if ($row == "") {
        continue;
      }
      $fields = explode(',', $row);
      
      for ($i = 0; $i < count($heading); $i++) {
              $objects[$index][$heading[$i]] = $fields[$i];
      }
      $index++;
    }
  }

  return $objects;
}

/* 
 * 
 * */
function islandora_sync_collection_sync(){
  
  /* prendo gli oggeti da risearch 
   * $pid -> pid della collezione
   * $fpid -> pid della collezione padre
   * $tname -> nome della collezione
   * */
  
  $query_string = 'select $pid $fpid $tname $mdate from <#ri> 
where ($figlio <info:fedora/fedora-system:def/relations-external#isMemberOfCollection> $padre)
and 
     ( $padre <fedora-model:hasModel> <info:fedora/islandora:collectionCModel> or $padre <fedora-model:hasModel> <info:fedora/epistemetec:sub_collection> ) 
and  
     ( $figlio <fedora-model:hasModel> <info:fedora/islandora:collectionCModel> or $figlio <fedora-model:hasModel> <info:fedora/epistemetec:sub_collection>) 
and   $figlio <dc:identifier> $pid and $padre <dc:identifier> $fpid and $figlio <dc:title> $tname
and   $figlio <fedora-view:lastModifiedDate> $mdate';
  
  $objects_tmp = __getObjects("",$query_string);
  
  //TODO: dai risultati devi eliminare le collezioni large images etc etc
  
  /* 
   * 
   *  */
  
  $objects = array();
  foreach ($objects_tmp as $object){
    $objects[ $object['pid'] ] = $object;
  }
  
  unset($objects['islandora:largeimages']);
  unset($objects['islandora:demos']);
  unset($objects['epistemetec:sub_collection']);
  unset($objects['islandora:ContentModelCollection']);
  
  
  
  /* Verifica la cancellazione di una colezione su fedora 
   * 
   * Prendi dalla tabella nel db le info di tutte le collezioni
   * 
   * */
  
  $query = "SELECT * FROM {islandora_sync_pid_fpid_tid}";
  $result = db_query($query);
  
  $array_table_full = Array();
  while ($row = db_fetch_array($result)){
    $array_table_full[$row['pid']] = $row;
  }
  unset($array_table_full['islandora:top']);
  $array_iTQL = array_keys($objects);
  $array_table = array_keys($array_table_full);
  
  
  $array_delete = array_diff($array_table, $array_iTQL);
  
  /* cancello */
  
  foreach ($array_delete as $item){
    $query = "DELETE FROM {islandora_sync_pid_fpid_tid} WHERE pid = '%s'";
    
    $result = db_query($query,$item);
    if ( $result != FALSE ) {
      $t_result = taxonomy_del_term($array_table_full[$item]['tid']);
    }
  }
  
  foreach ($objects as $pid => $object) {
    $new_tid = islandora_sync_save_term($pid, $objects);
  }
    
}
/* passa $objects per riferimento in modo che islandora_sync_save_term possa chiamarsi ricorsivamente 
 * per aggiornare il padre del pid corrente (devi essere in grado di avere il tid del padre) */
function islandora_sync_save_term($pid, &$objects){

  /* controllo che si presente nel db  */
  $query = "SELECT tid, mdate FROM {islandora_sync_pid_fpid_tid} WHERE pid = '%s'"; 
  
  $result = db_query($query, $pid);
  
  /* se la query va a buon fine è il pid non c'è lo aggiungo nel db */
  if ( $result != FALSE and $result->num_rows == 0 ){
    
    $vid = variable_get('islandora_sync_vocabulary', -1);
    if ($vid == -1 ){
      /* wachdog */
      watchdog('islandora_sync_vucabulary\'s id is not present','La scrittura del tid di islandora:top ha fallito.',Array(),WATCHDOG_ERROR);
      return false;
    }
    
    /* prendo il tid del padre dalla tabella */

    $query = "SELECT tid FROM {islandora_sync_pid_fpid_tid} WHERE pid = '%s'";
    $result = db_query($query,$objects[$pid]['fpid']);
  
  	/* se il padre di questa non è presente del db lancio la chiamata ricorsiva per creare il padre */
    if ($result->num_rows == 0){
      $ftid = islandora_sync_save_term($objects[$pid]['fpid'], &$objects);
    }
    else{
      $result = db_result($result);
      $ftid = $result;
    }
  
    $term = array(
   		'vid' => $vid,
   		'name' => $objects[$pid]['tname'],
      'parent' => $ftid,
    );
    
    $result_term = taxonomy_save_term($term);
    
    $table = 'islandora_sync_pid_fpid_tid';
    $record = new stdClass();
    $record->pid = $pid;
    $record->fpid = $objects[$pid]['fpid'];
    $record->tid = $term['tid'];
    $record->ftid = $ftid;
    $record->mdate = $objects[$pid]['mdate'];
    $result = drupal_write_record($table, $record);

    if ($result == FALSE){
      return 1;
    }
    return $term['tid'];
  }
  else {
    // la data della modifica presa dalla query iTQL è successiva a quella che sta nel db?
    $a_result = db_fetch_array($result);
    if ($a_result['mdate'] < $objects[$pid]['mdate']){
      // aggiorna il db, modifica il termine di tassonomia
      
      // carica il termine di tassonomia
      //$t = (int) $a_result['tid'];
      $term = taxonomy_get_term($a_result['tid']);
      
      $query = "SELECT tid FROM {islandora_sync_pid_fpid_tid} WHERE pid = '%s'";
      $result = db_query($query,$objects[$pid]['fpid']);
      if ($result->num_rows == 1){
        $ftid = db_result($result);
      }
      
      //$term->fpid = $objects[$pid]['fpid'];
      $term->parent = $ftid;

      $term = (array) $term;
      // quando aggiorna da un errore
      $result_term = taxonomy_save_term($term);
      // controlla il risultato del salvataggio
      
      $table = 'islandora_sync_pid_fpid_tid';
      $record = new stdClass();
      $record->pid = $pid;
      $record->fpid = $objects[$pid]['fpid'];
      $record->tid = $term['tid'];
      $record->ftid = $ftid;
      $record->mdate = $objects[$pid]['mdate'];
      $result_ur = drupal_write_record($table, $record,array('pid'));
      // aggiorna il record del db
    }
    
    //no non fare nulla
  }
  
}

/**
 * @file
 * Implements sync hooks that are used to connect nodes to feodora objects.
 *
 * Fedora hooks are implemented to create, modify and delete nodes accordingly with
 * Object creation, modification and deletion in the repository.
 */


function islandora_sync_menu() {
  $items['admin/settings/islandora_sync'] = array(
	  'title' => 'Islandora Sync settings',
	  'description' => 'Change synchronization elements between Islandora and Drupal.',
	  'page callback' => 'islandora_sync_admin_page',
	  'page arguments' => array(3),
	  'access arguments' => array('administer site configuration'),
	  'type' => MENU_NORMAL_ITEM,
		'file' => 'islandora_sync.admin.inc',
	);	
	
	$items['admin/settings/islandora_sync/edit/%'] = array(
    'title' => 'Edit CCK',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_sync_cck_edit_form', 4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
		'file' => 'islandora_sync.admin.inc',
	);
	
	$items['admin/settings/islandora_sync/settings'] = array(
    'title' => 'Variable Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_sync_admin_globals'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
		'file' => 'islandora_sync.admin.inc',
	);
	return $items;
}
	
/**
 * Implementation of hook_theme()
 */
function islandora_sync_theme() {
  return array(
    'islandora_sync_admin_type_assoc' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/**
 * Implementation of hook_fedora_alter_ingest().
 */
function islandora_sync_fedora_alter_ingest(&$form_values, &$dom, &$rootElement) {
	//we get the node type according to content model of the object being created.
	$content_model = $form_values['content_model_pid'];
	$item_dl = __getNodeTypeAssoc($content_model);
	
	if ($item_dl == FALSE) {
		drupal_set_message(t('Can\'t create a related Drupal node: there isn\'t a Node Type associated whit this Content Model'), 'warning');
		return FALSE;
	}
	
  //create the node
  module_load_include('php', 'islandora_sync', 'mynode');
	$node = new MyNode();
	$nid = $node->createNode($form_values, $item_dl);
	
	$node_url = $base_url . "/node/" . $nid; //TODO: here we can be more general using smart urls
	$form_values['drupal_node_url'] = $node_url;
	$form_values['drupal_node_nid'] = $nid;
	
	return __create_drupal_datastream($dom, $rootElement, $nid);
}
	
/**
 * Implementation of hook fedora_alter_edit()
 */
function islandora_sync_fedora_alter_edit(&$form_values) {
	module_load_include('php', 'islandora_sync', 'mynode');
		
	$node = new MyNode();
	$node->updateNode($form_values);
}
	
	/*
	function islandora_sync_form_alter(&$form, $form_state, $form_id) {
	
		switch ($form_id) {
			case 'fedora_repository_purge_object_form' :
				$form['#submit'][] = 'islandora_sync_purge_submit';
				break;
		}
	
		return $form;
	}
	*/

/**
 * 
 * questa funzione non verrà chiamata.
 */
function islandora_sync_fedora_after_purge($form, &$form_state){
	module_load_include('php', 'islandora_sync', 'mynode');

	$node = new MyNode();
	$node->deleteNode($form_state['islandora_sync']['nid']);
}

function islandora_sync_fedora_before_purge($form, &$form_state){
	module_load_include('php', 'islandora_sync', 'mynode');

	$node = new MyNode();
	$form_state['islandora_sync']['nid'] = $node->getNid($form_state['values']['pid']);
}


/**
 * Get node type according to a content model
 * @param string $cm
 */
function __getNodeTypeAssoc($cm) {
	$nt = db_result(db_query("SELECT node_type FROM {islandora_sync_admin_type_assoc} WHERE content_model = '%s'", $cm));
	
	if ($nt != FALSE) {
	  $node_types = node_get_types('names');
  	foreach ($node_types as $key => $value) {
  		if ($value == $nt) {
  			return $key; //we need the key name, not the value
  		}
  	}
	}
	else {
		return FALSE;
	}
}

function __create_drupal_datastream(&$dom, &$rootElement, $nid) {
	global $base_url;
	$node_url = $base_url . "/node/" . $nid; //TODO: here we can be more general using smart urls
	
	$datastream = $dom->createElement("foxml:datastream");
	$datastream->setAttribute("ID", "RELS-DRUPAL");
	$datastream->setAttribute("STATE", "A");
	$datastream->setAttribute("CONTROL_GROUP", "X");

	$version = $dom->createElement("foxml:datastreamVersion");
	$version->setAttribute("ID", "RELS-DRUPAL.0");
	$version->setAttribute("MIMETYPE", "text/xml");
	$version->setAttribute("LABEL", "Drupal nodes relations");
	$datastream->appendChild($version);

	$content = $dom->createElement("foxml:xmlContent");
	$version->appendChild($content);

	$drupal_rel = $dom->createElement("drupal_rel");

	$master = $dom->createElement("master");
	$drupal_rel->appendChild($master);

	$ds_base_url = $dom->createElement("base_url", $base_url);
	$ds_node_url = $dom->createElement("node_uri", $node_url);
	$ds_nid = $dom->createElement("nid", $nid);

	$master->appendChild($ds_base_url);
	$master->appendChild($ds_node_url);
	$master->appendChild($ds_nid);

	$content->appendChild($drupal_rel);

	$myxml = $dom->saveXML($datastream);

	$rootElement->appendChild($datastream);
	
	return $datastream;
}


