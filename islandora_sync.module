<?php
// $Id$


/*
 * Questa è la query iTQL per avere tutte le coppie collezione_padre,collezione_figlia
 * 
 * select $padre_identifier $figlio_identifier from <#ri>
 * where 
 *   ($figlio <info:fedora/fedora-system:def/relations-external#isMemberOfCollection> $padre)
 * and 
 *   ( $padre <fedora-model:hasModel> <info:fedora/islandora:collectionCModel> or
 *     $padre <fedora-model:hasModel> <info:fedora/epistemetec:sub_collection> )
 * and
 *   ( $figlio <fedora-model:hasModel> <info:fedora/islandora:collectionCModel> or 
 *    $figlio <fedora-model:hasModel> <info:fedora/epistemetec:sub_collection>)
 * and 
 *    $figlio <dc:identifier> $figlio_identifier
 * and 
 *    $padre <dc:identifier> $padre_identifier
 *    
 * */



function islandora_sync_collection_sync(){
  
  /* prendo gli oggeti da risearch 
   * $pid -> pid della collezione
   * $fpid -> pid della collezione padre
   * $tname -> nome della collezione
   * */
  
  $query_string = 'select $pid $fpid $tname $mdate from <#ri> 
		where
			($figlio <info:fedora/fedora-system:def/relations-external#isMemberOfCollection> $padre)
		and 
			( $padre <fedora-model:hasModel> <info:fedora/islandora:collectionCModel> or $padre <fedora-model:hasModel> <info:fedora/epistemetec:sub_collection> ) 
		and  
			( $figlio <fedora-model:hasModel> <info:fedora/islandora:collectionCModel> or $figlio <fedora-model:hasModel> <info:fedora/epistemetec:sub_collection>) 
		and
			$figlio <dc:identifier> $pid and $padre <dc:identifier> $fpid and $figlio <dc:title> $tname
		and
			$figlio <fedora-view:lastModifiedDate> $mdate';
  
  module_load_include('php', 'islandora_sync', 'islandora_sync_utils');
  $objects_tmp = __getObjects("",$query_string);

  if (empty($objects_tmp)){
    watchdog('islandora_sync_vucabulary',"La query iTQL ha restiruito un array vuoto, esco",Array( ),WATCHDOG_NOTICE);
    return;
  }
 
  $objects = array();
  foreach ($objects_tmp as $object){
    $objects[ $object['pid'] ] = $object;
  }
  
  // Unset unused collections
  
  if (isset($objects['islandora:largeimages']))
  	unset($objects['islandora:largeimages']);
  	
  if (isset($objects['islandora:demos']))
  	unset($objects['islandora:demos']);
  	
  if (isset($objects['epistemetec:sub_collection']))
  	unset($objects['epistemetec:sub_collection']);
  	
  if (isset($objects['islandora:ContentModelCollection']))	
  	unset($objects['islandora:ContentModelCollection']);
  
  
  //Verifica la cancellazione di una collezione su fedora. Prendi dalla tabella nel db le info di tutte le collezioni
  $query = "SELECT * FROM {islandora_sync_pid_fpid_tid}";
  $result = db_query($query);
  
  $array_table_full = Array();
  while ($row = db_fetch_array($result)){
    $array_table_full[$row['pid']] = $row;
  }
  unset($array_table_full['islandora:top']);
  $array_iTQL = array_keys($objects);
  $array_table = array_keys($array_table_full);
  
  
  $array_delete = array_diff($array_table, $array_iTQL);
  
  /* cancello */
  
  foreach ($array_delete as $item){
    $query = "DELETE FROM {islandora_sync_pid_fpid_tid} WHERE pid = '%s'";
    
    $result = db_query($query,$item);
    if ( $result != FALSE ) {
      $t_result = taxonomy_del_term($array_table_full[$item]['tid']);
    }
  }
  
  foreach ($objects as $pid => $object) {
    $new_tid = islandora_sync_save_term($pid, $objects);
  }
    
}
/* passa $objects per riferimento in modo che islandora_sync_save_term possa chiamarsi ricorsivamente 
 * per aggiornare il padre del pid corrente (devi essere in grado di avere il tid del padre) */
function islandora_sync_save_term($pid, &$objects){
  
  module_load_include('inc', 'fedora_repository', 'ConnectionHelper');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  watchdog('islandora_sync_vucabulary',"Murigo la coppia figlio - padre: @figlio - @padre",Array( '@figlio' => $objects[$pid]['pid'], '@padre' => $objects[$pid]['fpid'] ),WATCHDOG_NOTICE);
  
  /* controllo che si presente nel db  */
  $query = "SELECT tid, mdate FROM {islandora_sync_pid_fpid_tid} WHERE pid = '%s'"; 
  
  $result = db_query($query, $pid);
  
  /* se la query va a buon fine e il pid non c'è lo aggiungo nel db */
  if ( $result != FALSE and $result->num_rows == 0 ){
    
    $vid = variable_get('islandora_sync_vocabulary', -1);
    if ($vid == -1 ){
      watchdog('islandora_sync_vucabulary\'s id is not present','La scrittura del tid di islandora:top ha fallito.',Array(),WATCHDOG_ERROR);
      return false;
    }
    
    /* prendo il tid del padre dalla tabella */

    $query = "SELECT tid FROM {islandora_sync_pid_fpid_tid} WHERE pid = '%s'";
    $result = db_query($query,$objects[$pid]['fpid']);
  
  	/* se il padre di questa non è presente del db lancio la chiamata ricorsiva per creare il padre */
    if ($result->num_rows == 0){
      $ftid = islandora_sync_save_term($objects[$pid]['fpid'], &$objects);
    }
    else {
      $result = db_result($result);
      $ftid = $result;
    }

    /* qui faccio la chiamata per recuperare la descrizione 
     * ho il pid, prendo il DS Mag e dal qui il valore del campo dc:description
     * */
    
    $soapHelper = new ConnectionHelper();
    $client = $soapHelper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));

    $dsId = 'MAG';
    $params = array(
      'pid' => "$pid",
      'dsID' => "$dsId",
      'asOfDateTime' => ""
    );
    
    $term = array(
      'vid' => $vid,
      'name' => $objects[$pid]['tname'],
      'parent' => $ftid,
    );
    
    try {

      $fo = new Fedora_Item($pid);
      
      $datastreams = $fo->get_datastreams_list_as_array(); 

      if (isset($datastreams['MAG'])){
      	watchdog('islandora_sync_vucabulary',"Nella collezione @collection e' presente il DS MAG",Array( '@collection' => $objects[$pid]['tname'] ),WATCHDOG_ERROR);
        $mag_ds = $client->__soapCAll('getDatastreamDissemination', array('parameters' => $params));
        $mag_ds_se = new SimpleXMLElement($mag_ds->dissemination->stream);
        $dc = $mag_ds_se->bib->children("http://purl.org/dc/elements/1.1/");
        $term['description'] = (string) $dc->description;
      }
    }
    catch (Exception $e) {
      watchdog('islandora_sync_vucabulary',"Errore nel contattare fedora @exception",Array( 'exception' => $e->getMessage() ),WATCHDOG_ERROR);
    }
    
    //TODO: controllare che il padre $ftid esista sul vocabolario..
    
    $result_term = taxonomy_save_term($term);
    
    $table = 'islandora_sync_pid_fpid_tid';
    $record = new stdClass();
    $record->pid = $pid;
    $record->fpid = $objects[$pid]['fpid'];
    $record->tid = $term['tid'];
    $record->ftid = $ftid;
    $record->mdate = $objects[$pid]['mdate'];
    $result = drupal_write_record($table, $record);

    if ($result == FALSE){
      return 1;
    }
    return $term['tid'];
  }
  else {
    // la data della modifica presa dalla query iTQL è successiva a quella che sta nel db?
    $a_result = db_fetch_array($result);
    if ($a_result['mdate'] < $objects[$pid]['mdate']){
      // aggiorna il db, modifica il termine di tassonomia
      
      // carica il termine di tassonomia
      //$t = (int) $a_result['tid'];
      $term = taxonomy_get_term($a_result['tid']);
      
      $query = "SELECT tid FROM {islandora_sync_pid_fpid_tid} WHERE pid = '%s'";
      $result = db_query($query,$objects[$pid]['fpid']);
      if ($result->num_rows == 1){
        $ftid = db_result($result);
      }
      
      $soapHelper = new ConnectionHelper();
      $client = $soapHelper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));
  
      $dsId = 'MAG';
      $params = array(
      	'pid' => "$pid",
        'dsID' => "$dsId",
        'asOfDateTime' => ""
      );
      try {
        $mag_ds = $client->__soapCAll('getDatastreamDissemination', array('parameters' => $params));
        $mag_ds_se = new SimpleXMLElement($mag_ds->dissemination->stream);
        $dc = $mag_ds_se->bib->children("http://purl.org/dc/elements/1.1/");
      }
      catch (Exception $e) {
      	drupal_set_message("La collezione " . $pid . "non ha datastream MAG", 'info');
        return;
      }
      
      /* qui faccio la chiamata per recuperare la descrizione 
     	* ho il pid, prendo il DS Mag e dal qui il valore del campo dc:description
     	* */
      //$fo = new Fedora_Item($pid);
      //$mag_ds = $fo.get_datastream("MAG");
      
      //$term->fpid = $objects[$pid]['fpid'];
      $term->parent = $ftid;
      $term->description = $dc->description;

      $term = (array) $term;
      // quando aggiorna da un errore
      $result_term = taxonomy_save_term($term);
      // controlla il risultato del salvataggio
      
      $table = 'islandora_sync_pid_fpid_tid';
      $record = new stdClass();
      $record->pid = $pid;
      $record->fpid = $objects[$pid]['fpid'];
      $record->tid = $term['tid'];
      $record->ftid = $ftid;
      $record->mdate = $objects[$pid]['mdate'];
      $result_ur = drupal_write_record($table, $record,array('pid'));
      // aggiorna il record del db
    }
    
    //no non fare nulla
  }
  
}

/**
 * @file
 * Implements sync hooks that are used to connect nodes to feodora objects.
 *
 * Fedora hooks are implemented to create, modify and delete nodes accordingly with
 * Object creation, modification and deletion in the repository.
 */
function islandora_sync_menu() {
	$items['admin/settings/islandora_sync'] = array(
	    'title' => 'Islandora Sync settings',
	    'description' => 'Change synchronization elements between Islandora and Drupal.',
	    'page callback' => 'islandora_sync_admin_page',
	    'page arguments' => array(3),
	    'access arguments' => array('administer site configuration'),
	    'type' => MENU_NORMAL_ITEM,
	    'file' => 'islandora_sync.admin.inc',
	);

	$items['admin/settings/islandora_sync/edit/%'] = array(
	    'title' => 'Edit CCK',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('islandora_sync_cck_edit_form', 4),
	    'access arguments' => array('administer site configuration'),
	    'type' => MENU_CALLBACK,
		'file' => 'islandora_sync.admin.inc',
	);

	$items['admin/settings/islandora_sync/settings'] = array(
	    'title' => 'Variable Settings',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('islandora_sync_admin_globals'),
	    'access arguments' => array('administer site configuration'),
	    'type' => MENU_NORMAL_ITEM,
		'file' => 'islandora_sync.admin.inc',
	);

	return $items;
}


/**
 * Implementation of hook_theme()
 */
function islandora_sync_theme() {
  return array(
    'islandora_sync_admin_type_assoc' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/**
 * Implementation of hook_cronapi()
 * 
 * @param string $op
 * @param string $job
 */
function islandora_sync_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array(
        'islandora_sync_refresh_sync' => 'create and update fifo table',
      	'islandora_sync_manage_nodes' => 'nodify tot elements from fifo every tot',
      	'islandora_sync_collection_sync' => 'create and update collection table'
      );
      
    case 'rule':      
     if ($job == 'islandora_sync_collection_sync' || $job == 'refresh_sync')
        return '0 * * * *'; //every hour
        
    case 'execute':
      if ($job == 'islandora_sync_refresh_sync') {
        islandora_sync_refresh_sync();
      }
  	  elseif ($job == 'islandora_sync_manage_nodes') {
        islandora_sync_manage_nodes();
      }
      elseif ($job == 'islandora_sync_collection_sync'){
        islandora_sync_collection_sync();
      }
  }
  
}

/**
 * Implementation of hook_fedora_after_ingest().
 */
function islandora_sync_fedora_after_ingest($form_values) {
	
	//TODO esegui solo quando crei una collezione
	islandora_sync_collection_sync();
	
	$content_model = $form_values['content_model_pid'];
	
	module_load_include('php', 'islandora_sync', 'islandora_sync_utils');
	$cm_type = __getNodeTypeAssoc($content_model);
	
	if ($cm_type == FALSE) {
		drupal_set_message(t("Can't create a related Drupal node: there isn't a Node Type associated whit this Content Model"), 'error');
		return FALSE;
	}
	
	$nid = createNode($form_values, $cm_type);
	
	if (!empty($nid)) {
		if (isset($form_values['pid'])) {
			$pid = $form_values['pid'];
			
			//because we are hooking after ingestion, we are on the master, the only one that can ingest an object.
			$is_master = TRUE; //here we don't need variable_get("islandora_sync_is_master", 0);
			
			$status = createBaseDrupalRelDatastream($pid);
			
			if ($status) {
				$status = createRelOnDrupalRelDatastream($pid, $nid, $is_master);
				
				if ($status) {
					//drupal_set_message(t('Relationship created successfully on the Drupal REL'), 'notice');
					return TRUE;
				}
				else {
					drupal_set_message(t('Failed to create the relationship with the Drupal REL'), 'error');
				}
			}
			else {
				drupal_set_message(t('There are errors creating the Drupal REL'), 'error');
			}
		}
		else {
			drupal_set_message(t("Can't create the Drupal REL because no pid was specified"), 'error');
		}
	}
	else {
		drupal_set_message(t('Failed to create a Drupal Node'), 'error');
	}
	
	return FALSE;
}

	
/**
 * Implementation of hook fedora_after_edit()
 * 
 * @param array $form_values
 * @param string $pid
 */
function islandora_sync_fedora_after_edit($form_values, $pid) {
	module_load_include('php', 'islandora_sync', 'islandora_sync_utils');
	$nid = __getNidFromFedora($pid);
	
	if ($nid > 0) {
		$status = updateNode($form_values, $nid);
	}
}

/**
 * We need to retrieve the nid of the associated object that we are eliminating
 * and save it into the form_state.
 * fedora_before_purge is on "fedora_repository.module" @ fedora_repository_purge_object_form_submit.
 * 
 * @param array $form
 * @param array &$form_state
 */
function islandora_sync_fedora_before_purge($form, &$form_state) {
	module_load_include('php', 'islandora_sync', 'islandora_sync_utils');

	//TODO si potrebbe fare un controllo incrociato anche con __getNidFromDrupal...
	$nid = __getNidFromFedora($form_state['values']['pid']);
	
	if ($nid > 0) {
	  $form_state['islandora_sync']['nid'] = $nid;
	}
}

/**
 * Delete the node.
 * fedora_after_purge is on "fedora_repository.module" @ fedora_repository_purge_object_form_submit.
 * 
 * @param array $form
 * @param array &$form_state
 */
function islandora_sync_fedora_after_purge($form, &$form_state) {
	module_load_include('php', 'islandora_sync', 'islandora_sync_utils');
	
	if (isset($form_state['islandora_sync']['nid'])) {
	  deleteNode($form_state['islandora_sync']['nid']);
	}
}


/**
 * The cron runs islandora_sync_refresh_sync that takes all pids of objects fedora
 * (sorted by updated date - through the query mulgara) and stores them in the table
 * along with content_model.
 * It also saves on a drupal variable, for each content model, the date of this update.
 */
function islandora_sync_refresh_sync() {
	module_load_include('php', 'islandora_sync', 'islandora_sync_utils');

	$sql = "SELECT content_model FROM {islandora_sync_admin_type_assoc}	WHERE content_model != '0'";
	$results = db_query($sql);

	while ($content_model = db_result($results)) {
		$last_global_mod_date = variable_get('islandora_sync_last_global_modified_date_' . $content_model, "1983-05-05T08:03:05.736Z");

		$itql = 'select $title $identifier $modified from <#ri>
						  where $object <dc:title> $title
						    and $object <dc:identifier> $identifier
						    and $object <fedora-view:lastModifiedDate> $modified
						    and $modified <mulgara:after> \'' . $last_global_mod_date . '\'^^<xml-schema:dateTime> in <#xsd>
						    and $object <fedora-model:hasModel> <info:fedora/' . $content_model . '>
						  order by $modified';

		$objects = __getObjects($content_model, $itql);

		if (empty($objects)) {
			watchdog("islandora_sync", "No objects were found for type @type", array('@type' => $content_model), WATCHDOG_NOTICE);
			continue; //try the next content model
		}

		$count = 0;
		foreach ($objects as $object) {
			$count++;
			
			$pid = $object['identifier'];
			$last_obj_mod_date = $object['modified'];

			$sql = "INSERT INTO {islandora_sync_fifo} (pid, content_model, last_mod_date) VALUES ('%s', '%s', '%s') ";
			$result = db_query($sql, $pid, $content_model, $last_obj_mod_date);
		}
	  	
		watchdog("islandora_sync", "@count items of type @type were added into the queue of nodes to be processed", array('@count' => $count, '@type' => $content_model), WATCHDOG_NOTICE);
		
		variable_set('islandora_sync_last_global_modified_date_' . $content_model, $last_obj_mod_date);
	}

	return true;
}

/**
 * Create or update nodes based on fedora object pids taken from the fifo table.
 */
function islandora_sync_manage_nodes() {
	global $user;
	
	/*
	 * We must acquire a lock for N seconds to prevent multiple calls to this function in order to avoid duplicated nodes.
	 * Seconds required by the lock can be a multiple of the number of processed nodes, depending on the time spent
	 * to create each node. From our tests this time can be between less than 1 second to some minutes.
	 * Apart from that lock will be released when the while finished so seconds can be more than how really required.
	 */
	$nopn = variable_get('islandora_sync_number_of_processed_nodes', '10');
	$timeout = $nopn * 10;
	
	watchdog("islandora_sync", "Trying to acquire lock by @uid - PID:@pid", array('@uid' => $user->uid, '@pid' => getmypid() ), WATCHDOG_NOTICE);
	if (lock_acquire('islandora_sync_manage_nodes', $timeout)) {
		watchdog("islandora_sync", "Lock acquired by @uid - PID:@pid", array('@uid' => $user->uid, '@pid' => getmypid() ), WATCHDOG_NOTICE);
		
		$table = "{islandora_sync_fifo}";
		
		module_load_include('php', 'islandora_sync', 'islandora_sync_utils');

		$sql = "SELECT * FROM $table WHERE 1";
		$result = db_query_range($sql, 0, $nopn);
		 
		while ($fedora_object = db_fetch_object($result)) {
			$pid = $fedora_object->pid;
			$cm = $fedora_object->content_model;
			
			//watchdog("islandora_sync", "Managing object @pid with type @cm", array('@pid' => $pid, '@cm' => $cm), WATCHDOG_NOTICE);
			 
			__manage_node($pid, $cm);
			 
			$sql = "DELETE FROM $table WHERE pid ='{$pid}'";
			$res = db_query($sql);
		}
		
		lock_release('islandora_sync_manage_nodes');
		watchdog("islandora_sync", "Lock released by @uid - PID:@pid", array('@uid' => $user->uid, '@pid' => getmypid() ), WATCHDOG_NOTICE);
	}
	else {
		watchdog("islandora_sync", "Try to acquire lock FAILED! by @uid - PID:@pid", array('@uid' => $user->uid, '@pid' => getmypid() ), WATCHDOG_NOTICE);
	}
	
	return true;
}

/**
 * Implementation of hook nodeapi()
 * 
 * @param unknown_type &$node - The node the action is being performed on
 * @param unknown_type $op - What kind of action is being performed
 */
function islandora_sync_nodeapi(&$node, $op) {
  switch ($op) {
    case 'delete':
      $types = node_get_types();
      $hr_type = $types[$node->type]->name;
      
      $cm = db_result(db_query("SELECT content_model FROM {islandora_sync_admin_type_assoc} WHERE node_type = '%s'", $hr_type));
      
      if ($cm != FALSE and $cm != '0') {
        $nid = $node->nid;
        $pid = $node->field_fedora_pid[0]['value'];
        
        /*
        $can_delete_object = variable_get('islandora_mag_delete_fo_on_del', '0'); //uhm? non ci dovrebbero essere chiamate verso mag...
        if ($can_delete_object == 1) {
          echo "deleting object from Fedora Repository...";
        }
        */
        
        module_load_include('php', 'islandora_sync', 'islandora_sync_utils');
        deleteRelOnDrupalRelDatastream($pid, $nid);
      }
      echo "deleting..";
      break;
  }
  
}
